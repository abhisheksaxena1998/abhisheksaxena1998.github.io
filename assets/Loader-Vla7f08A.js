import{r as n,e as be,j as N}from"./index-CY5mIjTw.js";import{u as we,e as Se,Z as je,V,n as ne,m as se,h as Ee,ao as We,ap as L}from"./Preload-CwnTIXpg.js";import{_ as Ce}from"./extends-CCbyfPlC.js";const R=new V,Z=new V,Re=new V,re=new Ee;function $e(e,t,r){const s=R.setFromMatrixPosition(e.matrixWorld);s.project(t);const i=r.width/2,a=r.height/2;return[s.x*i+i,-(s.y*a)+a]}function Oe(e,t){const r=R.setFromMatrixPosition(e.matrixWorld),s=Z.setFromMatrixPosition(t.matrixWorld),i=r.sub(s),a=t.getWorldDirection(Re);return i.angleTo(a)>Math.PI/2}function Te(e,t,r,s){const i=R.setFromMatrixPosition(e.matrixWorld),a=i.clone();a.project(t),re.set(a.x,a.y),r.setFromCamera(re,t);const x=r.intersectObjects(s,!0);if(x.length){const b=x[0].distance;return i.distanceTo(r.ray.origin)<b}return!0}function Fe(e,t){if(t instanceof ne)return t.zoom;if(t instanceof se){const r=R.setFromMatrixPosition(e.matrixWorld),s=Z.setFromMatrixPosition(t.matrixWorld),i=t.fov*Math.PI/180,a=r.distanceTo(s);return 1/(2*Math.tan(i/2)*a)}else return 1}function He(e,t,r){if(t instanceof se||t instanceof ne){const s=R.setFromMatrixPosition(e.matrixWorld),i=Z.setFromMatrixPosition(t.matrixWorld),a=s.distanceTo(i),x=(r[1]-r[0])/(t.far-t.near),b=r[1]-x*t.far;return Math.round(x*a+b)}}const k=e=>Math.abs(e)<1e-10?0:e;function oe(e,t,r=""){let s="matrix3d(";for(let i=0;i!==16;i++)s+=k(t[i]*e.elements[i])+(i!==15?",":")");return r+s}const Le=(e=>t=>oe(t,e))([1,-1,1,1,1,-1,1,1,1,-1,1,1,1,-1,1,1]),Ve=(e=>(t,r)=>oe(t,e(r),"translate(-50%,-50%)"))(e=>[1/e,1/e,1/e,1,-1/e,-1/e,-1/e,-1,1/e,1/e,1/e,1,1,1,1,1]);function ze(e){return e&&typeof e=="object"&&"current"in e}const Ae=n.forwardRef(({children:e,eps:t=.001,style:r,className:s,prepend:i,center:a,fullscreen:x,portal:b,distanceFactor:j,sprite:ie=!1,transform:h=!1,occlude:c,onOcclude:B,castShadow:ae,receiveShadow:ce,material:le,geometry:_,zIndexRange:$=[16777271,0],calculatePosition:G=$e,as:ue="div",wrapperClass:z,pointerEvents:q="auto",...v},J)=>{const{gl:K,camera:l,scene:Q,size:f,raycaster:fe,events:de,viewport:me}=we(),[u]=n.useState(()=>document.createElement(ue)),A=n.useRef(),m=n.useRef(null),U=n.useRef(0),O=n.useRef([0,0]),E=n.useRef(null),D=n.useRef(null),w=(b==null?void 0:b.current)||de.connected||K.domElement.parentNode,g=n.useRef(null),T=n.useRef(!1),F=n.useMemo(()=>c&&c!=="blending"||Array.isArray(c)&&c.length&&ze(c[0]),[c]);n.useLayoutEffect(()=>{const d=K.domElement;c&&c==="blending"?(d.style.zIndex=`${Math.floor($[0]/2)}`,d.style.position="absolute",d.style.pointerEvents="none"):(d.style.zIndex=null,d.style.position=null,d.style.pointerEvents=null)},[c]),n.useLayoutEffect(()=>{if(m.current){const d=A.current=be(u);if(Q.updateMatrixWorld(),h)u.style.cssText="position:absolute;top:0;left:0;pointer-events:none;overflow:hidden;";else{const o=G(m.current,l,f);u.style.cssText=`position:absolute;top:0;left:0;transform:translate3d(${o[0]}px,${o[1]}px,0);transform-origin:0 0;`}return w&&(i?w.prepend(u):w.appendChild(u)),()=>{w&&w.removeChild(u),d.unmount()}}},[w,h]),n.useLayoutEffect(()=>{z&&(u.className=z)},[z]);const X=n.useMemo(()=>h?{position:"absolute",top:0,left:0,width:f.width,height:f.height,transformStyle:"preserve-3d",pointerEvents:"none"}:{position:"absolute",transform:a?"translate3d(-50%,-50%,0)":"none",...x&&{top:-f.height/2,left:-f.width/2,width:f.width,height:f.height},...r},[r,a,x,f,h]),he=n.useMemo(()=>({position:"absolute",pointerEvents:q}),[q]);n.useLayoutEffect(()=>{if(T.current=!1,h){var d;(d=A.current)==null||d.render(n.createElement("div",{ref:E,style:X},n.createElement("div",{ref:D,style:he},n.createElement("div",{ref:J,className:s,style:r,children:e}))))}else{var o;(o=A.current)==null||o.render(n.createElement("div",{ref:J,style:X,className:s,children:e}))}});const S=n.useRef(!0);Se(d=>{if(m.current){l.updateMatrixWorld(),m.current.updateWorldMatrix(!0,!1);const o=h?O.current:G(m.current,l,f);if(h||Math.abs(U.current-l.zoom)>t||Math.abs(O.current[0]-o[0])>t||Math.abs(O.current[1]-o[1])>t){const y=Oe(m.current,l);let p=!1;F&&(Array.isArray(c)?p=c.map(M=>M.current):c!=="blending"&&(p=[Q]));const W=S.current;if(p){const M=Te(m.current,l,fe,p);S.current=M&&!y}else S.current=!y;W!==S.current&&(B?B(!S.current):u.style.display=S.current?"block":"none");const H=Math.floor($[0]/2),xe=c?F?[$[0],H]:[H-1,0]:$;if(u.style.zIndex=`${He(m.current,l,xe)}`,h){const[M,ee]=[f.width/2,f.height/2],I=l.projectionMatrix.elements[5]*ee,{isOrthographicCamera:te,top:ve,left:pe,bottom:ge,right:ye}=l,Me=Le(l.matrixWorldInverse),Pe=te?`scale(${I})translate(${k(-(ye+pe)/2)}px,${k((ve+ge)/2)}px)`:`translateZ(${I}px)`;let P=m.current.matrixWorld;ie&&(P=l.matrixWorldInverse.clone().transpose().copyPosition(P).scale(m.current.scale),P.elements[3]=P.elements[7]=P.elements[11]=0,P.elements[15]=1),u.style.width=f.width+"px",u.style.height=f.height+"px",u.style.perspective=te?"":`${I}px`,E.current&&D.current&&(E.current.style.transform=`${Pe}${Me}translate(${M}px,${ee}px)`,D.current.style.transform=Ve(P,1/((j||10)/400)))}else{const M=j===void 0?1:Fe(m.current,l)*j;u.style.transform=`translate3d(${o[0]}px,${o[1]}px,0) scale(${M})`}O.current=o,U.current=l.zoom}}if(!F&&g.current&&!T.current)if(h){if(E.current){const o=E.current.children[0];if(o!=null&&o.clientWidth&&o!=null&&o.clientHeight){const{isOrthographicCamera:y}=l;if(y||_)v.scale&&(Array.isArray(v.scale)?v.scale instanceof V?g.current.scale.copy(v.scale.clone().divideScalar(1)):g.current.scale.set(1/v.scale[0],1/v.scale[1],1/v.scale[2]):g.current.scale.setScalar(1/v.scale));else{const p=(j||10)/400,W=o.clientWidth*p,H=o.clientHeight*p;g.current.scale.set(W,H,1)}T.current=!0}}}else{const o=u.children[0];if(o!=null&&o.clientWidth&&o!=null&&o.clientHeight){const y=1/me.factor,p=o.clientWidth*y,W=o.clientHeight*y;g.current.scale.set(p,W,1),T.current=!0}g.current.lookAt(d.camera.position)}});const Y=n.useMemo(()=>({vertexShader:h?void 0:`
          /*
            This shader is from the THREE's SpriteMaterial.
            We need to turn the backing plane into a Sprite
            (make it always face the camera) if "transfrom"
            is false.
          */
          #include <common>

          void main() {
            vec2 center = vec2(0., 1.);
            float rotation = 0.0;

            // This is somewhat arbitrary, but it seems to work well
            // Need to figure out how to derive this dynamically if it even matters
            float size = 0.03;

            vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
            vec2 scale;
            scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
            scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );

            bool isPerspective = isPerspectiveMatrix( projectionMatrix );
            if ( isPerspective ) scale *= - mvPosition.z;

            vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale * size;
            vec2 rotatedPosition;
            rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
            rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
            mvPosition.xy += rotatedPosition;

            gl_Position = projectionMatrix * mvPosition;
          }
      `,fragmentShader:`
        void main() {
          gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
        }
      `}),[h]);return n.createElement("group",Ce({},v,{ref:m}),c&&!F&&n.createElement("mesh",{castShadow:ae,receiveShadow:ce,ref:g},_||n.createElement("planeGeometry",null),le||n.createElement("shaderMaterial",{side:je,vertexShader:Y.vertexShader,fragmentShader:Y.fragmentShader})))});let C=0;const De=We(e=>(L.onStart=(t,r,s)=>{e({active:!0,item:t,loaded:r,total:s,progress:(r-C)/(s-C)*100})},L.onLoad=()=>{e({active:!1})},L.onError=t=>e(r=>({errors:[...r.errors,t]})),L.onProgress=(t,r,s)=>{r===s&&(C=s),e({active:!0,item:t,loaded:r,total:s,progress:(r-C)/(s-C)*100||100})},{errors:[],active:!1,progress:0,item:"",loaded:0,total:0})),Ze=()=>{const{progress:e}=De();return N.jsxs(Ae,{as:"div",center:!0,style:{display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"column"},children:[N.jsx("span",{className:"canvas-loader"}),N.jsxs("p",{className:"loader-text",children:[e.toFixed(2),"%"]})]})};export{Ze as default};
